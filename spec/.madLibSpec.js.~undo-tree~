"143c97a1400ec27db013700ac9fdb4e2b014dba5"
[cl-struct-undo-tree [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil (#4=[nil nil ((640 . 645) (#("Be" 0 2 (fontified t)) . 640) (t 23092 20716 450879 322000)) nil (23092 20774 106446 705000) 0 nil]) ((608 . 614) (t 23092 20691 314542 628000)) nil (23092 20716 383165 444000) 0 nil]) ((597 . 649) (#("      expect(Promise.all(resultArr)).toBe(trueArray);
" 0 12 (fontified t) 12 13 (fontified t face (rainbow-delimiters-depth-5-face)) 13 24 (fontified t) 24 25 (fontified t face (rainbow-delimiters-depth-6-face)) 25 34 (fontified t) 34 35 (fontified t face (rainbow-delimiters-depth-6-face)) 35 36 (fontified t face (rainbow-delimiters-depth-5-face)) 36 41 (fontified t) 41 42 (fontified t face (rainbow-delimiters-depth-5-face)) 42 51 (fontified t) 51 52 (fontified t face (rainbow-delimiters-depth-5-face)) 52 54 (fontified t)) . 597) (undo-tree-id461 . -54) (undo-tree-id462 . -54) (undo-tree-id463 . 18) (undo-tree-id464 . -24) (undo-tree-id465 . 19) (undo-tree-id466 . 19) (undo-tree-id467 . -35) (undo-tree-id468 . -35) (undo-tree-id469 . -35) (undo-tree-id470 . -54)) nil (23092 20691 272664 27000) 0 nil]) ((632 . 633) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-6-face))) . 632) (631 . 632) (#(" " 0 1 (fontified nil)) . -631) (631 . 632) (#(")" 0 1 (fontified nil)) . -631) (631 . 632)) nil (23092 20691 272669 556000) 0 nil]) ((#("l" 0 1 (fontified t)) . -622) (undo-tree-id471 . -1) 623 (622 . 623) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-6-face))) . 622) (undo-tree-id472 . -1) (601 . 603) (619 . 621) (#("(" 0 1 (fontified nil)) . -619) (undo-tree-id473 . -1) (608 . 620) (#("p" 0 1 (fontified t)) . -608) (undo-tree-id474 . -1) 609 (608 . 609) (t 23092 20621 612123 756000)) nil (23092 20691 272686 546000) 0 nil]) ((#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -433) 431) nil (23092 20621 536998 267000) 0 nil]) ((320 . 323) 335 (t 23092 20614 915544 901000)) nil (23092 20621 537002 907000) 0 nil]) ((399 . 405)) nil (23092 20614 879415 198000) 0 nil]) ((372 . 378) (t 23092 20560 546257 521000)) nil (23092 20614 879418 884000) 0 nil]) ((708 . 714) (#("     });
" 0 3 (fontified t) 3 5 (fontified t) 5 6 (fontified t face (rainbow-delimiters-depth-4-face)) 6 7 (fontified t face (rainbow-delimiters-depth-3-face)) 7 9 (fontified t)) . 708) (undo-tree-id416 . -3) (undo-tree-id417 . 6) (undo-tree-id418 . -3) (undo-tree-id419 . -3) (undo-tree-id420 . -9) (undo-tree-id421 . -9) (undo-tree-id422 . -9) (undo-tree-id423 . -9) (156 . 188) (#("       this.madLib = new MadLib();
" 0 3 (fontified t) 3 7 (fontified t) 7 11 (fontified t face font-lock-constant-face) 11 21 (fontified t) 21 24 (fontified t face font-lock-keyword-face) 24 25 (fontified t) 25 31 (fontified t face font-lock-type-face) 31 32 (fontified t face (rainbow-delimiters-depth-5-face)) 32 33 (fontified t face (rainbow-delimiters-depth-5-face)) 33 35 (fontified t)) . 156) (undo-tree-id424 . -3) (undo-tree-id425 . -3) (undo-tree-id426 . -3) (undo-tree-id427 . -3) (undo-tree-id428 . -3) (undo-tree-id429 . -3) (undo-tree-id430 . -3) (undo-tree-id431 . -3) (undo-tree-id432 . -3) (undo-tree-id433 . -3) (undo-tree-id434 . -3) (undo-tree-id435 . -3) (undo-tree-id436 . -3) (undo-tree-id437 . -35) (undo-tree-id438 . -35) (undo-tree-id439 . -35)) nil (23092 20560 477973 396000) 0 nil]) ((#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -323)) nil (23092 20560 477977 776000) 0 nil]) ((323 . 326)) nil (23092 20560 477979 50000) 0 nil]) ((468 . 471) 470) nil (23092 20560 477980 630000) 0 nil]) ((421 . 424) 415) nil (23092 20560 477981 788000) 0 nil]) ((#(" // const input = \"how many repos does griselda have?\";
    // console.log(this);
    // this.witch.process(input).then(output => {
    //   expect(this.parser.parse).toHaveBeenCalledWith(input);
    //   expect(this.runner.run).toHaveBeenCalledWith(this.command);
    //   expect(this.formatter.format).toHaveBeenCalledWith(this.response);
    //   expect(output).toEqual(this.output);
    //   done();
    // });
" 0 1 (fontified t) 1 4 (fontified t face font-lock-comment-delimiter-face) 4 6 (fontified t face font-lock-comment-face) 6 9 (fontified t face font-lock-comment-face) 9 10 (fontified t face font-lock-comment-face) 10 15 (fontified t face font-lock-comment-face) 15 18 (fontified t face font-lock-comment-face) 18 42 (fontified t face font-lock-comment-face) 42 44 (fontified t face font-lock-comment-face) 44 46 (fontified t face font-lock-comment-face) 46 54 (fontified t face font-lock-comment-face) 54 55 (fontified t face font-lock-comment-face) 55 56 (fontified t face font-lock-comment-face) 56 60 (fontified t) 60 63 (fontified t face font-lock-comment-delimiter-face) 63 74 (fontified t face font-lock-comment-face) 74 75 (fontified t face font-lock-comment-face) 75 79 (fontified t face font-lock-comment-face) 79 80 (fontified t face font-lock-comment-face) 80 82 (fontified t face font-lock-comment-face) 82 86 (fontified t) 86 89 (fontified t face font-lock-comment-delimiter-face) 89 93 (fontified t face font-lock-comment-face) 93 96 (fontified t face font-lock-comment-face) 96 107 (fontified t face font-lock-comment-face) 107 108 (fontified t face font-lock-comment-face) 108 111 (fontified t face font-lock-comment-face) 111 113 (fontified t face font-lock-comment-face) 113 114 (fontified t face font-lock-comment-face) 114 119 (fontified t face font-lock-comment-face) 119 120 (fontified t face font-lock-comment-face) 120 121 (fontified t face font-lock-comment-face) 121 130 (fontified t face font-lock-comment-face) 130 131 (fontified t face font-lock-comment-face) 131 132 (fontified t face font-lock-comment-face) 132 136 (fontified t) 136 139 (fontified t face font-lock-comment-delimiter-face) 139 141 (fontified t face font-lock-comment-delimiter-face) 141 143 (fontified t face font-lock-comment-face) 143 146 (fontified t face font-lock-comment-face) 146 147 (fontified t face font-lock-comment-face) 147 148 (fontified t face font-lock-comment-face) 148 152 (fontified t face font-lock-comment-face) 152 165 (fontified t face font-lock-comment-face) 165 166 (fontified t face font-lock-comment-face) 166 168 (fontified t face font-lock-comment-face) 168 169 (fontified t face font-lock-comment-face) 169 180 (fontified t face font-lock-comment-face) 180 187 (fontified t face font-lock-comment-face) 187 188 (fontified t face font-lock-comment-face) 188 191 (fontified t face font-lock-comment-face) 191 193 (fontified t face font-lock-comment-face) 193 194 (fontified t face font-lock-comment-face) 194 196 (fontified t face font-lock-comment-face) 196 197 (fontified t) 197 200 (fontified t) 200 203 (fontified t face font-lock-comment-delimiter-face) 203 205 (fontified t face font-lock-comment-delimiter-face) 205 206 (fontified t face font-lock-comment-face) 206 207 (fontified t face font-lock-comment-face) 207 208 (fontified t face font-lock-comment-face) 208 211 (fontified t face font-lock-comment-face) 211 212 (fontified t face font-lock-comment-face) 212 216 (fontified t face font-lock-comment-face) 216 227 (fontified t face font-lock-comment-face) 227 228 (fontified t face font-lock-comment-face) 228 229 (fontified t face font-lock-comment-face) 229 234 (fontified t face font-lock-comment-face) 234 237 (fontified t face font-lock-comment-face) 237 240 (fontified t face font-lock-comment-face) 240 249 (fontified t face font-lock-comment-face) 249 250 (fontified t face font-lock-comment-face) 250 251 (fontified t face font-lock-comment-face) 251 254 (fontified t face font-lock-comment-face) 254 260 (fontified t face font-lock-comment-face) 260 261 (fontified t face font-lock-comment-face) 261 262 (fontified t face font-lock-comment-face) 262 263 (fontified t face font-lock-comment-face) 263 265 (fontified t face font-lock-comment-face) 265 268 (fontified t) 268 269 (fontified t) 269 270 (fontified t face font-lock-comment-delimiter-face) 270 272 (fontified t face font-lock-comment-delimiter-face) 272 274 (fontified t face font-lock-comment-delimiter-face) 274 280 (fontified t face font-lock-comment-face) 280 281 (fontified t face font-lock-comment-face) 281 285 (fontified t face font-lock-comment-face) 285 293 (fontified t face font-lock-comment-face) 293 300 (fontified t face font-lock-comment-face) 300 302 (fontified t face font-lock-comment-face) 302 303 (fontified t face font-lock-comment-face) 303 305 (fontified t face font-lock-comment-face) 305 309 (fontified t face font-lock-comment-face) 309 318 (fontified t face font-lock-comment-face) 318 324 (fontified t face font-lock-comment-face) 324 325 (fontified t face font-lock-comment-face) 325 329 (fontified t face font-lock-comment-face) 329 334 (fontified t face font-lock-comment-face) 334 338 (fontified t face font-lock-comment-face) 338 339 (fontified t face font-lock-comment-face) 339 341 (fontified t face font-lock-comment-face) 341 345 (fontified t) 345 346 (fontified t face font-lock-comment-delimiter-face) 346 348 (fontified t face font-lock-comment-delimiter-face) 348 350 (fontified t face font-lock-comment-delimiter-face) 350 356 (fontified t face font-lock-comment-face) 356 357 (fontified t face font-lock-comment-face) 357 363 (fontified t face font-lock-comment-face) 363 364 (fontified t face font-lock-comment-face) 364 365 (fontified t face font-lock-comment-face) 365 372 (fontified t face font-lock-comment-face) 372 373 (fontified t face font-lock-comment-face) 373 375 (fontified t face font-lock-comment-face) 375 377 (fontified t face font-lock-comment-face) 377 384 (fontified t face font-lock-comment-face) 384 385 (fontified t face font-lock-comment-face) 385 386 (fontified t face font-lock-comment-face) 386 387 (fontified t face font-lock-comment-face) 387 391 (fontified t) 391 394 (fontified t face font-lock-comment-delimiter-face) 394 396 (fontified t face font-lock-comment-delimiter-face) 396 399 (fontified t face font-lock-comment-face) 399 400 (fontified t face font-lock-comment-face) 400 401 (fontified t face font-lock-comment-face) 401 402 (fontified t face font-lock-comment-face) 402 404 (fontified t face font-lock-comment-face) 404 408 (fontified t) 408 411 (fontified t face font-lock-comment-delimiter-face) 411 412 (fontified t face font-lock-comment-face) 412 413 (fontified t face font-lock-comment-face) 413 414 (fontified t face font-lock-comment-face) 414 415 (fontified t face font-lock-comment-face)) . 708) (undo-tree-id440 . -414) (undo-tree-id441 . -414) (undo-tree-id442 . -414)) nil (23092 20560 477991 270000) 0 nil]) ((#(" // this.parser = { parse() {} };
    // this.runner = { run() {} };
    // this.formatter = { format() {} };

    // this.command = \"command\";
    // this.response = \"response\";
    // this.output = \"output\";

    // spyOn(this.parser, \"parse\").and.returnValue(this.command);
    // spyOn(this.runner, \"run\").and.returnValue(Promise.resolve(this.response));
    // spyOn(this.formatter, \"format\").and.returnValue(this.output);

    // this.witch = new GitWitch({
    //   parser: this.parser,
    //   runner: this.runner,
    //   formatter: this.formatter
    // });
" 0 1 (fontified t) 1 4 (fontified t face font-lock-comment-delimiter-face) 4 8 (fontified t face font-lock-comment-face) 8 18 (fontified t face font-lock-comment-face) 18 19 (fontified t face font-lock-comment-face) 19 25 (fontified t face font-lock-comment-face) 25 26 (fontified t face font-lock-comment-face) 26 27 (fontified t face font-lock-comment-face) 27 28 (fontified t face font-lock-comment-face) 28 29 (fontified t face font-lock-comment-face) 29 30 (fontified t face font-lock-comment-face) 30 31 (fontified t face font-lock-comment-face) 31 32 (fontified t face font-lock-comment-face) 32 33 (fontified t face font-lock-comment-face) 33 34 (fontified t face font-lock-comment-face) 34 38 (fontified t) 38 41 (fontified t face font-lock-comment-delimiter-face) 41 45 (fontified t face font-lock-comment-face) 45 55 (fontified t face font-lock-comment-face) 55 56 (fontified t face font-lock-comment-face) 56 60 (fontified t face font-lock-comment-face) 60 61 (fontified t face font-lock-comment-face) 61 62 (fontified t face font-lock-comment-face) 62 63 (fontified t face font-lock-comment-face) 63 64 (fontified t face font-lock-comment-face) 64 65 (fontified t face font-lock-comment-face) 65 66 (fontified t face font-lock-comment-face) 66 67 (fontified t face font-lock-comment-face) 67 69 (fontified t face font-lock-comment-face) 69 73 (fontified t) 73 76 (fontified t face font-lock-comment-delimiter-face) 76 80 (fontified t face font-lock-comment-face) 80 93 (fontified t face font-lock-comment-face) 93 94 (fontified t face font-lock-comment-face) 94 101 (fontified t face font-lock-comment-face) 101 102 (fontified t face font-lock-comment-face) 102 103 (fontified t face font-lock-comment-face) 103 104 (fontified t face font-lock-comment-face) 104 105 (fontified t face font-lock-comment-face) 105 106 (fontified t face font-lock-comment-face) 106 107 (fontified t face font-lock-comment-face) 107 108 (fontified t face font-lock-comment-face) 108 110 (fontified t face font-lock-comment-face) 110 111 (fontified t) 111 115 (fontified t) 115 118 (fontified t face font-lock-comment-delimiter-face) 118 122 (fontified t face font-lock-comment-face) 122 133 (fontified t face font-lock-comment-face) 133 142 (fontified t face font-lock-comment-face) 142 144 (fontified t face font-lock-comment-face) 144 148 (fontified t) 148 151 (fontified t face font-lock-comment-delimiter-face) 151 155 (fontified t face font-lock-comment-face) 155 167 (fontified t face font-lock-comment-face) 167 177 (fontified t face font-lock-comment-face) 177 179 (fontified t face font-lock-comment-face) 179 183 (fontified t) 183 186 (fontified t face font-lock-comment-delimiter-face) 186 190 (fontified t face font-lock-comment-face) 190 200 (fontified t face font-lock-comment-face) 200 208 (fontified t face font-lock-comment-face) 208 210 (fontified t face font-lock-comment-face) 210 211 (fontified t) 211 215 (fontified t) 215 218 (fontified t face font-lock-comment-delimiter-face) 218 223 (fontified t face font-lock-comment-face) 223 224 (fontified t face font-lock-comment-face) 224 228 (fontified t face font-lock-comment-face) 228 237 (fontified t face font-lock-comment-face) 237 244 (fontified t face font-lock-comment-face) 244 245 (fontified t face font-lock-comment-face) 245 261 (fontified t face font-lock-comment-face) 261 262 (fontified t face font-lock-comment-face) 262 266 (fontified t face font-lock-comment-face) 266 274 (fontified t face font-lock-comment-face) 274 275 (fontified t face font-lock-comment-face) 275 277 (fontified t face font-lock-comment-face) 277 281 (fontified t) 281 284 (fontified t face font-lock-comment-delimiter-face) 284 289 (fontified t face font-lock-comment-face) 289 290 (fontified t face font-lock-comment-face) 290 294 (fontified t face font-lock-comment-face) 294 303 (fontified t face font-lock-comment-face) 303 308 (fontified t face font-lock-comment-face) 308 309 (fontified t face font-lock-comment-face) 309 325 (fontified t face font-lock-comment-face) 325 326 (fontified t face font-lock-comment-face) 326 341 (fontified t face font-lock-comment-face) 341 342 (fontified t face font-lock-comment-face) 342 346 (fontified t face font-lock-comment-face) 346 355 (fontified t face font-lock-comment-face) 355 356 (fontified t face font-lock-comment-face) 356 357 (fontified t face font-lock-comment-face) 357 359 (fontified t face font-lock-comment-face) 359 363 (fontified t) 363 366 (fontified t face font-lock-comment-delimiter-face) 366 371 (fontified t face font-lock-comment-face) 371 372 (fontified t face font-lock-comment-face) 372 376 (fontified t face font-lock-comment-face) 376 388 (fontified t face font-lock-comment-face) 388 396 (fontified t face font-lock-comment-face) 396 397 (fontified t face font-lock-comment-face) 397 413 (fontified t face font-lock-comment-face) 413 414 (fontified t face font-lock-comment-face) 414 418 (fontified t face font-lock-comment-face) 418 425 (fontified t face font-lock-comment-face) 425 426 (fontified t face font-lock-comment-face) 426 427 (fontified t face font-lock-comment-face) 427 428 (fontified t face font-lock-comment-face) 428 429 (fontified t) 429 433 (fontified t) 433 436 (fontified t face font-lock-comment-delimiter-face) 436 440 (fontified t face font-lock-comment-face) 440 448 (fontified t face font-lock-comment-face) 448 449 (face font-lock-comment-face fontified t) 449 452 (face font-lock-comment-face fontified t) 452 453 (face font-lock-comment-face fontified t) 453 461 (face font-lock-comment-face fontified t) 461 462 (face font-lock-comment-face fontified t) 462 463 (face font-lock-comment-face fontified t) 463 464 (face font-lock-comment-face fontified t) 464 468 (fontified t) 468 471 (fontified t face font-lock-comment-delimiter-face) 471 473 (fontified t face font-lock-comment-delimiter-face) 473 476 (fontified t face font-lock-comment-face) 476 479 (fontified t face font-lock-comment-face) 479 481 (fontified t face font-lock-comment-face) 481 485 (fontified t face font-lock-comment-face) 485 494 (fontified t face font-lock-comment-face) 494 498 (fontified t) 498 501 (fontified t face font-lock-comment-delimiter-face) 501 503 (fontified t face font-lock-comment-delimiter-face) 503 511 (fontified t face font-lock-comment-face) 511 512 (fontified t face font-lock-comment-face) 512 515 (fontified t face font-lock-comment-face) 515 524 (fontified t face font-lock-comment-face) 524 528 (fontified t) 528 531 (fontified t face font-lock-comment-delimiter-face) 531 533 (fontified t face font-lock-comment-delimiter-face) 533 544 (fontified t face font-lock-comment-face) 544 548 (fontified t face font-lock-comment-face) 548 559 (fontified t face font-lock-comment-face) 559 563 (fontified t) 563 566 (fontified t face font-lock-comment-delimiter-face) 566 567 (fontified t face font-lock-comment-face) 567 568 (fontified t face font-lock-comment-face) 568 569 (fontified t face font-lock-comment-face) 569 570 (fontified t face font-lock-comment-face)) . 159) (undo-tree-id443 . -569) (undo-tree-id444 . -569) (undo-tree-id445 . -38) (undo-tree-id446 . -110) (undo-tree-id447 . -210) (undo-tree-id448 . -428) (undo-tree-id449 . -494) (undo-tree-id450 . -494) (undo-tree-id451 . -155) (undo-tree-id452 . -155) (undo-tree-id453 . -210) (undo-tree-id454 . -210) (undo-tree-id455 . -428) (undo-tree-id456 . -463) (undo-tree-id457 . -523) (undo-tree-id458 . -359) (undo-tree-id459 . -359) (undo-tree-id460 . -569) (t 23092 20124 135282 104000)) nil (23092 20560 478003 551000) 0 nil]) ((#("await " 0 6 (fontified t)) . 966)) nil (23092 20124 103376 547000) 0 nil]) ((#("async " 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 6 (fontified t)) . 945) (t 23092 19922 391218 949000)) nil (23092 20124 103380 568000) 0 nil]) ((#("await " 0 6 (fontified t)) . 934) (undo-tree-id411 . -5) (undo-tree-id412 . -5) (undo-tree-id413 . -5) (undo-tree-id414 . -5) (undo-tree-id415 . -6) 939 (t 23092 19860 342014 335000)) nil (23092 19922 337018 570000) 0 nil]) ((768 . 814) (#("    it(\"returns a list of nouns\", async ()=> {
" 0 6 (fontified t) 6 7 (fontified t face (rainbow-delimiters-depth-3-face)) 7 31 (fontified t face font-lock-string-face) 31 32 (fontified t face font-lock-string-face) 32 34 (fontified t) 34 40 (fontified t) 40 41 (fontified t face (rainbow-delimiters-depth-4-face)) 41 42 (fontified t face (rainbow-delimiters-depth-4-face)) 42 45 (fontified t) 45 46 (fontified t face (rainbow-delimiters-depth-4-face)) 46 47 (fontified t)) . 768) (undo-tree-id396 . -40) (undo-tree-id397 . 5) (undo-tree-id398 . -47) (undo-tree-id399 . -47) (undo-tree-id400 . -39) (undo-tree-id401 . -39) (undo-tree-id402 . -47) (undo-tree-id403 . -47) (undo-tree-id404 . -40) (undo-tree-id405 . -40) (undo-tree-id406 . -40) (undo-tree-id407 . -47)) nil (23092 19860 289808 248000) 0 nil]) ((#("    done();
" 0 8 (fontified t) 8 9 (fontified t face (rainbow-delimiters-depth-5-face)) 9 10 (fontified t face (rainbow-delimiters-depth-5-face)) 10 12 (fontified t)) . 1294) (undo-tree-id408 . -12) (undo-tree-id409 . -12) (undo-tree-id410 . -4) 1298) nil (23092 19860 289813 669000) 0 nil]) ((#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . 810) (809 . 810) (770 . 772) (806 . 808) (#("(" 0 1 (fontified nil)) . -806) (806 . 807)) nil (23092 19860 289816 479000) 0 nil]) ((#("done " 0 5 (fontified t)) . 806) (t 23092 19410 97663 160000)) nil (23092 19860 289817 911000) 0 nil] [nil nil ((#("done " 0 5 (fontified t)) . 806) (t 23092 19410 97663 160000)) ((806 . 811)) (23092 19851 743912 693000) 0 nil] [nil ([nil nil ((#(")" 0 1 (fontified nil face #1=(rainbow-delimiters-depth-4-face))) . 810) (undo-tree-id377 . -1) (809 . 810) (770 . 772) (806 . 808) (#("(" 0 1 (fontified nil)) . -806) (806 . 807) (#("h" 0 1 (fontified t)) . -806) (undo-tree-id378 . -1) 807 (806 . 807)) ((#("h" 0 1 (fontified nil)) . 806) (undo-tree-id379 . 1) (undo-tree-id380 . 1) (806 . 807) (#("(" 0 1 (fontified nil)) . 806) (undo-tree-id381 . 1) (undo-tree-id382 . 1) (806 . 807) (#("()" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face)) 1 2 (fontified nil face #1#)) . 806) (undo-tree-id383 . -1) (undo-tree-id384 . 1) (undo-tree-id385 . 1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . 1) (undo-tree-id389 . -1) (undo-tree-id390 . 2) (undo-tree-id391 . -1) (#("  " 0 2 (fontified nil)) . 770) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . 809) (undo-tree-id392 . 1) (undo-tree-id393 . 1) (undo-tree-id394 . 1) (undo-tree-id395 . -1) (810 . 811)) (23092 19843 306830 130000) 0 nil]) ((#("done " 0 5 (fontified t)) . 806) (t 23092 19410 97663 160000)) ((806 . 811)) (23092 19843 307406 996000) 0 nil]) ((1051 . 1079) (#("      console.log(resultArr);
" 0 17 (fontified t) 17 18 (fontified t face (rainbow-delimiters-depth-5-face)) 18 27 (fontified t) 27 28 (fontified t face (rainbow-delimiters-depth-5-face)) 28 29 (fontified t) 29 30 (fontified t)) . 1051) (undo-tree-id367 . -30) (undo-tree-id368 . -30) (undo-tree-id369 . 1) (undo-tree-id370 . 2) (undo-tree-id371 . 2) (undo-tree-id372 . -28) (undo-tree-id373 . -28) (undo-tree-id374 . -28) (undo-tree-id375 . -30)) nil (23092 19851 744185 564000) 0 nil]) ((1079 . 1080) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-5-face))) . 1079) (undo-tree-id376 . -1) (1078 . 1079) (1069 . 1078) (1068 . 1070) (#("(" 0 1 (fontified nil)) . -1068) (1057 . 1069) (1050 . 1057) (t 23092 19373 88113 810000) 1049) nil (23092 19410 63432 235000) 0 nil]) ((1005 . 1027) (#("	console.log(y);
" 0 12 (fontified t) 12 13 (fontified t face (rainbow-delimiters-depth-7-face)) 13 14 (fontified t) 14 15 (fontified t face (rainbow-delimiters-depth-7-face)) 15 16 (fontified t) 16 17 (fontified t)) . 1005) (undo-tree-id357 . 1) (undo-tree-id358 . -17) (undo-tree-id359 . -17) (undo-tree-id360 . 2) (undo-tree-id361 . 2) (undo-tree-id362 . -15) (undo-tree-id363 . -15) (undo-tree-id364 . -15) (undo-tree-id365 . -17)) nil (23092 19373 52562 507000) 0 nil]) ((1020 . 1021) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-7-face))) . 1020) (undo-tree-id366 . -1) (1018 . 1020) (1017 . 1019) (#("(" 0 1 (fontified nil)) . -1017) (1006 . 1018) (1004 . 1006) (t 23092 19366 561526 324000) 991) nil (23092 19373 52568 255000) 0 nil]) ((936 . 942) (t 23092 19306 538916 818000)) nil (23092 19366 538753 780000) 0 nil]) ((960 . 1015) (#("	let y = await wordpos.isNoun(x);
	return y;
" 0 1 (fontified t) 1 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 6 (fontified t face font-lock-variable-name-face) 6 15 (fontified t) 15 22 (fontified t) 22 29 (fontified t) 29 30 (fontified t face (rainbow-delimiters-depth-7-face)) 30 31 (fontified t) 31 32 (fontified t face (rainbow-delimiters-depth-7-face)) 32 33 (fontified t) 33 34 (fontified t) 34 35 (fontified t) 35 41 (fontified t face font-lock-keyword-face) 41 44 (fontified t) 44 45 (fontified t)) . 960) (undo-tree-id342 . -45) (undo-tree-id343 . -34) (undo-tree-id344 . -34) (undo-tree-id345 . 30) (undo-tree-id346 . -45) (undo-tree-id347 . -45) (undo-tree-id348 . -45) (undo-tree-id349 . -45) (undo-tree-id350 . -45) (undo-tree-id351 . 31) (undo-tree-id352 . 31) (undo-tree-id353 . -14) (undo-tree-id354 . -14) (undo-tree-id355 . -14) (undo-tree-id356 . -45)) nil (23092 19306 507373 552000) 0 nil]) ((969 . 975)) nil (23092 19306 507377 14000) 0 nil]) ((989 . 998) (987 . 989) 968) nil (23092 19306 507378 541000) 0 nil]) ((961 . 969)) nil (23092 19306 507379 658000) 0 nil]) ((#("return " 0 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t)) . 961)) nil (23092 19306 507380 435000) 0 nil]) ((960 . 961) (#("      " 0 6 (fontified nil)) . 960) (990 . 991)) nil (23092 19306 507381 921000) 0 nil]) ((#(".then(result => {" 0 5 (fontified t) 5 6 (fontified t face (rainbow-delimiters-depth-7-face)) 6 16 (fontified t) 16 17 (fontified t face (rainbow-delimiters-depth-8-face))) . 990)) nil (23092 19306 507382 915000) 0 nil] [nil nil ((#("      return wordpos.isNoun(x).then(result => {
" 0 6 (fontified t) 6 12 (fontified t face font-lock-keyword-face) 12 27 (fontified t) 27 28 (fontified t face (rainbow-delimiters-depth-7-face)) 28 29 (fontified t) 29 30 (fontified t face (rainbow-delimiters-depth-7-face)) 30 35 (fontified t) 35 36 (fontified t face (rainbow-delimiters-depth-7-face)) 36 46 (fontified t) 46 47 (fontified t face (rainbow-delimiters-depth-8-face)) 47 48 (fontified t)) . 960) (undo-tree-id319 . -48) (undo-tree-id320 . -48) (undo-tree-id321 . -48) (undo-tree-id322 . -48) (undo-tree-id323 . -48) (undo-tree-id324 . -48) (undo-tree-id325 . -48) (undo-tree-id326 . -30) 990) ((960 . 1008)) (23092 19284 696224 167000) 0 nil]) ((#("      });
" 0 6 (fontified t) 6 7 (fontified t face (rainbow-delimiters-depth-8-face)) 7 8 (fontified t face (rainbow-delimiters-depth-7-face)) 8 9 (fontified t) 9 10 (fontified t)) . 1008) (undo-tree-id327 . -10) (undo-tree-id328 . -10) (undo-tree-id329 . 10) (undo-tree-id330 . 10) (undo-tree-id331 . -6) (undo-tree-id332 . 4) (undo-tree-id333 . -7) 1014) nil (23092 19284 696412 275000) 0 nil]) ((#("        ;
" 0 8 (fontified t) 8 10 (fontified t)) . 1008) (undo-tree-id334 . -8) (undo-tree-id335 . -10) (undo-tree-id336 . -10) (undo-tree-id337 . -8) (undo-tree-id338 . 2) (undo-tree-id339 . -8) (undo-tree-id340 . -8) (undo-tree-id341 . -8) 1016) nil (23092 19284 696268 301000) 0 nil] [nil nil ((#("      return wordpos.isNoun(x).then(result => {
        ;
" 0 6 (fontified t) 6 12 (fontified t face font-lock-keyword-face) 12 27 (fontified t) 27 28 (fontified t face (rainbow-delimiters-depth-7-face)) 28 29 (fontified t) 29 30 (fontified t face (rainbow-delimiters-depth-7-face)) 30 35 (fontified t) 35 36 (fontified t face (rainbow-delimiters-depth-7-face)) 36 46 (fontified t) 46 47 (fontified t face (rainbow-delimiters-depth-8-face)) 47 48 (fontified t) 48 56 (fontified t) 56 58 (fontified t)) . 960) (undo-tree-id300 . -56) (undo-tree-id301 . -58) (undo-tree-id302 . -58) (undo-tree-id303 . -48) (undo-tree-id304 . -48) (undo-tree-id305 . -56) (undo-tree-id306 . 2) (undo-tree-id307 . -56) (undo-tree-id308 . -56) (undo-tree-id309 . -48) (undo-tree-id310 . -56) 1016) ((960 . 1018)) (23092 19273 163158 181000) 0 nil]) ((#("resolve(result)" 0 7 (fontified t) 7 8 (fontified t face (rainbow-delimiters-depth-9-face)) 8 14 (fontified t) 14 15 (fontified t face (rainbow-delimiters-depth-9-face))) . 1016) (undo-tree-id311 . -14) (undo-tree-id312 . -14) (undo-tree-id313 . -14) (undo-tree-id314 . -14) (undo-tree-id315 . 1) (undo-tree-id316 . -15) (undo-tree-id317 . 8) (undo-tree-id318 . -8) 1030 (t 23092 19244 752986 274000)) nil (23092 19273 163299 934000) 0 nil]) ((1008 . 1033) (#("          resolve(result);
" 0 17 (fontified t) 17 18 (fontified t face (rainbow-delimiters-depth-9-face)) 18 24 (fontified t) 24 25 (fontified t face (rainbow-delimiters-depth-9-face)) 25 27 (fontified t)) . 1008) (undo-tree-id289 . -8) (undo-tree-id290 . -27) (undo-tree-id291 . -27) (undo-tree-id292 . 2) (undo-tree-id293 . 3) (undo-tree-id294 . 3) (undo-tree-id295 . -24) (undo-tree-id296 . -24) (undo-tree-id297 . -24) (undo-tree-id298 . -27)) nil (23092 19244 690584 542000) 0 nil]) ((1032 . 1033) (#(" " 0 1 (fontified t)) . -1026) (undo-tree-id299 . -1) 1027 (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-9-face))) . 1026) (1016 . 1018) (1023 . 1025) (#("(" 0 1 (fontified nil)) . -1023) (1016 . 1024) (#("return" 0 6 (fontified t face font-lock-keyword-face)) . 1016) (t 23092 19186 357005 942000)) nil (23092 19244 690591 95000) 0 nil] [nil ([nil nil ((#("async " 0 6 (fontified t)) . 800) (undo-tree-id286 . -5) (undo-tree-id287 . -5) (undo-tree-id288 . -5)) ((800 . 806) (t 23092 19149 270769 901000)) (23092 19149 246047 882000) 0 nil]) ((#("await " 0 6 (fontified t)) . 859)) ((859 . 865)) (23092 19183 909257 557000) 0 nil]) ((#("await " 0 6 (fontified t)) . 936) (t 23092 19113 347849 445000)) nil (23092 19184 451435 865000) 0 nil]) ((972 . 979) (t 23092 19063 468415 241000)) nil (23092 19113 324669 209000) 0 nil]) ((936 . 942) (t 23092 18902 266840 247000)) nil (23092 19063 436366 538000) 0 nil]) ((#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -895) (t 23092 18877 913778 570000)) nil (23092 18902 208421 274000) 0 nil]) ((963 . 1037) (#("	wordpos.isNoun(x).then(result => {
	    return result;
	})
" 0 1 (fontified t) 1 15 (fontified t) 15 16 (fontified t face (rainbow-delimiters-depth-7-face)) 16 17 (fontified t) 17 18 (fontified t face (rainbow-delimiters-depth-7-face)) 18 23 (fontified t) 23 24 (fontified t face (rainbow-delimiters-depth-7-face)) 24 34 (fontified t) 34 35 (fontified t face (rainbow-delimiters-depth-8-face)) 35 36 (fontified t) 36 41 (fontified t) 41 47 (fontified t face font-lock-keyword-face) 47 55 (fontified t) 55 56 (fontified t) 56 57 (fontified t) 57 58 (fontified t face (rainbow-delimiters-depth-8-face)) 58 59 (fontified t face (rainbow-delimiters-depth-7-face)) 59 60 (fontified t)) . 963) (undo-tree-id265 . -36) (undo-tree-id266 . -36) (undo-tree-id267 . -60) (undo-tree-id268 . -60) (undo-tree-id269 . 5) (undo-tree-id270 . 59) (undo-tree-id271 . -56) (undo-tree-id272 . -56) (undo-tree-id273 . -60) (undo-tree-id274 . -60)) nil (23092 18877 886643 685000) 0 nil]) ((#("      return resulting;
" 0 6 (fontified t) 6 12 (fontified t face font-lock-keyword-face) 12 24 (fontified t)) . 1023) (undo-tree-id275 . -24) (undo-tree-id276 . -24) (undo-tree-id277 . -22) 1045) nil (23092 18877 886649 74000) 0 nil]) ((1004 . 1018) (999 . 1004) (999 . 1000)) nil (23092 18877 886651 10000) 0 nil]) ((998 . 1000) (997 . 999) (#("{" 0 1 (fontified nil)) . -997) (995 . 998) (987 . 995) (963 . 964) (#("      " 0 6 (fontified nil)) . 963) (undo-tree-id278 . -6) (undo-tree-id279 . -6) (undo-tree-id280 . -6) (undo-tree-id281 . -6) (991 . 993) (#("(" 0 1 (fontified nil)) . -991) (986 . 992)) nil (23092 18877 886655 652000) 0 nil]) ((#(";" 0 1 (fontified t)) . 986)) nil (23092 18877 886657 288000) 0 nil]) ((#("let resulting=" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 13 (fontified t face font-lock-variable-name-face) 13 14 (fontified t)) . 969) (undo-tree-id282 . -13) (undo-tree-id283 . -13) (undo-tree-id284 . -13) (undo-tree-id285 . -13) 982) nil (23092 18877 886661 923000) 0 nil]) ((#(" " 0 1 (fontified t)) . 982)) nil (23092 18877 886663 60000) 0 nil]) ((#(" " 0 1 (fontified t)) . 984)) nil (23092 18877 886663 947000) 0 nil]) ((#("t" 0 1 (fontified t)) . 984)) nil (23092 18877 886664 764000) 0 nil]) ((#("i" 0 1 (fontified t)) . 984)) nil (23092 18877 886665 583000) 0 nil]) ((#("a" 0 1 (fontified t)) . 984)) nil (23092 18877 886666 330000) 0 nil]) ((#("w" 0 1 (fontified t)) . 984)) nil (23092 18877 886667 97000) 0 nil]) ((#("a" 0 1 (fontified t)) . 984)) nil (23092 18877 886667 870000) 0 nil]) ((#(" " 0 1 (fontified t)) . 984) (t 23092 18791 974962 731000)) nil (23092 18877 886668 898000) 0 nil]) ((895 . 898) 908 (t 23092 18666 756694 638000)) nil (23092 18791 949502 873000) 0 nil]) ((804 . 806) (#(" " 0 1 (fontified t)) . -804) (undo-tree-id264 . -1) 805 (800 . 805)) nil (23092 18666 735073 297000) 0 nil]) ((853 . 859) (t 23092 18643 293686 823000)) nil (23092 18666 735077 36000) 0 nil]) ((1014 . 1017)) nil (23092 18643 250961 391000) 0 nil]) ((964 . 967) (t 23092 18631 383852 190000)) nil (23092 18643 250965 219000) 0 nil]) ((992 . 1013) (#("	return result;
" 0 1 (fontified t) 1 7 (fontified t face font-lock-keyword-face) 7 15 (fontified t) 15 16 (fontified t)) . 992) (undo-tree-id253 . -16) (undo-tree-id254 . -16) (undo-tree-id255 . 1) (undo-tree-id256 . 2) (undo-tree-id257 . 2) (undo-tree-id258 . -14) (undo-tree-id259 . -14) (undo-tree-id260 . -14) (undo-tree-id261 . -16)) nil (23092 18631 262307 962000) 0 nil]) ((993 . 1007) (992 . 993)) nil (23092 18631 262311 508000) 0 nil]) ((958 . 967) (#("y" 0 1 (fontified t face font-lock-variable-name-face)) . -958) (undo-tree-id262 . -1) 959 (954 . 959)) nil (23092 18631 262314 181000) 0 nil]) ((#("	" 0 1 (fontified t)) . -979) (undo-tree-id263 . -1) 980 (978 . 980) (t 23092 18609 474156 648000) 954) nil (23092 18631 262316 552000) 0 nil]) ((#("
" 0 1 (fontified t)) . 948) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1)) nil (23092 18609 416618 231000) 0 nil]) ((955 . 956)) nil (23092 18609 416621 126000) 0 nil]) ((#("return " 0 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t)) . 955)) nil (23092 18609 416622 310000) 0 nil]) ((#("	" 0 1 (fontified t)) . -948) (undo-tree-id252 . -1) 949 (948 . 949) (948 . 949) 961) nil (23092 18609 416626 356000) 0 nil] [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil nil ((#("y" 0 1 (fontified t)) . 935)) ((935 . 936)) (23092 18589 527674 476000) 0 nil]) ((#("s" 0 1 (fontified t)) . 935)) ((935 . 936)) (23092 18589 527805 894000) 0 nil]) ((#("a" 0 1 (fontified t)) . 935)) ((935 . 936)) (23092 18589 970005 548000) 0 nil]) ((#(" " 0 1 (fontified t)) . 961)) ((961 . 962)) (23092 18590 231046 878000) 0 nil]) ((#("t" 0 1 (fontified t)) . 961)) ((961 . 962)) (23092 18590 583064 593000) 0 nil]) ((#("i" 0 1 (fontified t)) . 961)) ((961 . 962)) (23092 18591 629007 887000) 0 nil]) ((#("a" 0 1 (fontified t)) . 961)) ((961 . 962)) (23092 18592 108529 349000) 0 nil]) ((#("w" 0 1 (fontified t)) . 961)) ((961 . 962)) (23092 18592 370743 850000) 0 nil]) ((#("a" 0 1 (fontified t)) . 961) (t 23092 18409 770282 139000)) nil (23092 18592 670626 121000) 0 nil]) ((961 . 967)) nil (23092 18409 744273 530000) 0 nil]) ((935 . 941)) nil (23092 18409 744276 320000) 0 nil]) ((#(" " 0 1 (fontified t)) . 924)) nil (23092 18409 744277 586000) 0 nil]) ((#("t" 0 1 (fontified t)) . 924) (undo-tree-id248 . -1)) nil (23092 18409 744281 349000) 0 nil]) ((#("i" 0 1 (fontified t)) . 924)) nil (23092 18409 744282 391000) 0 nil]) ((#("a" 0 1 (fontified t)) . 924)) nil (23092 18409 744283 158000) 0 nil]) ((#("w" 0 1 (fontified t)) . 924)) nil (23092 18409 744283 900000) 0 nil]) ((#("a" 0 1 (fontified t)) . 924) (t 23092 18383 543984 839000)) nil (23092 18409 744284 834000) 0 nil]) ((924 . 930) (t 23092 18327 688107 322000)) nil (23092 18383 451642 713000) 0 nil]) ((#("typeof " 0 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t)) . 895) (undo-tree-id247 . -3) (t 23092 18285 725369 265000)) nil (23092 18327 640536 644000) 0 nil]) ((879 . 911) (#("      console.log(typeof result);
" 0 17 (fontified t) 17 18 (fontified t face (rainbow-delimiters-depth-5-face)) 18 24 (fontified t face font-lock-keyword-face) 24 31 (fontified t) 31 32 (fontified t face (rainbow-delimiters-depth-5-face)) 32 33 (fontified t) 33 34 (fontified t)) . 879) (undo-tree-id238 . 1) (undo-tree-id239 . -34) (undo-tree-id240 . -34) (undo-tree-id241 . 2) (undo-tree-id242 . 2) (undo-tree-id243 . -32) (undo-tree-id244 . -32) (undo-tree-id245 . -32) (undo-tree-id246 . -34)) nil (23092 18285 693085 183000) 0 nil]) ((911 . 912) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-5-face))) . 911) (906 . 911) (897 . 906) (896 . 898) (#("(" 0 1 (fontified nil)) . -896) (885 . 897) (879 . 885) (879 . 880) 887 (t 23092 17969 973269 760000)) nil (23092 18285 693090 556000) 0 nil]) ((105 . 106) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 105) (104 . 105) (103 . 105) (#("(" 0 1 (fontified nil face font-lock-type-face)) . -103) (103 . 104) (82 . 103) (78 . 82) (77 . 78) 49) nil (23092 17969 941526 47000) 0 nil]) ((48 . 49) (#("w" 0 1 (fontified t face font-lock-variable-name-face)) . 48) (t 23092 17165 26566 943000)) nil (23092 17969 941530 773000) 0 nil]) ((1144 . 1156) (#("      done();
" 0 6 (fontified t) 6 10 (fontified t) 10 11 (fontified t face (rainbow-delimiters-depth-5-face)) 11 12 (fontified t face (rainbow-delimiters-depth-5-face)) 12 13 (fontified t) 13 14 (fontified t)) . 1144) (undo-tree-id229 . -14) (undo-tree-id230 . -14) (undo-tree-id231 . 1) (undo-tree-id232 . 2) (undo-tree-id233 . 2) (undo-tree-id234 . -12) (undo-tree-id235 . -12) (undo-tree-id236 . -12) (undo-tree-id237 . -14)) nil (23092 17164 989660 667000) 0 nil]) ((1156 . 1157) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-5-face))) . 1156) (1155 . 1156) (1154 . 1156) (#("(" 0 1 (fontified nil)) . -1154) (1150 . 1155) (1143 . 1150) (t 23092 17143 33663 994000) 1128) nil (23092 17164 989665 818000) 0 nil]) ((#("p" 0 1 (fontified t)) . -949) (undo-tree-id228 . -1) 950 (949 . 950) (948 . 950) (#("[" 0 1 (fontified nil)) . -948) (945 . 949) (t 23092 16843 176900 849000)) nil (23092 17143 1056 759000) 0 nil]) ((811 . 815)) nil (23092 16843 143833 809000) 0 nil]) ((#("    let result;
" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 14 (fontified t face font-lock-variable-name-face) 14 15 (fontified t) 15 16 (fontified t)) . 781) (undo-tree-id225 . -16) (undo-tree-id226 . -16) (undo-tree-id227 . -4) 785 (t 23092 16826 840534 791000)) nil (23092 16843 143843 867000) 0 nil]) ((#("    let number = 10;
" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 14 (fontified t face font-lock-variable-name-face) 14 20 (fontified t) 20 21 (fontified t)) . 823) (undo-tree-id221 . -21) (undo-tree-id222 . -21) (undo-tree-id223 . -19) 842) nil (23092 16826 769464 943000) 0 nil]) ((#("r" 0 1 (fontified t)) . 880)) nil (23092 16826 769468 505000) 0 nil]) ((#("e" 0 1 (fontified t)) . 880)) nil (23092 16826 769470 62000) 0 nil]) ((#("b" 0 1 (fontified t)) . 880)) nil (23092 16826 769471 81000) 0 nil]) ((#("m" 0 1 (fontified t)) . 880)) nil (23092 16826 769471 992000) 0 nil]) ((#("u" 0 1 (fontified t)) . 880)) nil (23092 16826 769472 773000) 0 nil]) ((#("n" 0 1 (fontified t)) . 880)) nil (23092 16826 769473 617000) 0 nil]) ((#(" " 0 1 (fontified t)) . 880)) nil (23092 16826 769474 546000) 0 nil]) ((#("," 0 1 (fontified t)) . 880) (undo-tree-id224 . -1) (t 23092 16784 437709 114000)) nil (23092 16826 769477 235000) 0 nil]) ((#(":" 0 1 (fontified t)) . 881)) nil (23092 16784 402307 192000) 0 nil]) ((#(" number" 0 7 (fontified t)) . 881)) nil (23092 16784 402311 227000) 0 nil]) ((#("string: " 0 8 (fontified t)) . 874)) nil (23092 16784 402312 717000) 0 nil]) ((#(" }" 0 1 (fontified nil) 1 2 (fontified nil face (rainbow-delimiters-depth-6-face))) . 904) (#("{ " 0 1 (fontified t face (rainbow-delimiters-depth-6-face)) 1 2 (fontified t)) . -874) (undo-tree-id220 . -2) 876 (t 23092 16735 724958 162000)) nil (23092 16784 402318 887000) 0 nil]) ((911 . 1116) (#("      let resultArr = result.map(x => {
	  return wordpos.isNoun(x);
      })
      let trueArray;
      for(let i = 0; i < 10; i++){
	  trueArray.push(true);
      }
      expect(resultArr).toBe(trueArray)
" 0 6 (fontified t) 6 9 (fontified t face font-lock-keyword-face) 9 10 (fontified t) 10 19 (fontified t face font-lock-variable-name-face) 19 22 (fontified t) 22 28 (fontified t) 28 32 (fontified t) 32 33 (fontified t face (rainbow-delimiters-depth-5-face)) 33 38 (fontified t) 38 39 (fontified t face (rainbow-delimiters-depth-6-face)) 39 40 (fontified t) 40 43 (fontified t) 43 49 (fontified t face font-lock-keyword-face) 49 64 (fontified t) 64 65 (fontified t face (rainbow-delimiters-depth-7-face)) 65 66 (fontified t) 66 67 (fontified t face (rainbow-delimiters-depth-7-face)) 67 68 (fontified t) 68 69 (fontified t) 69 75 (fontified t) 75 76 (fontified t face (rainbow-delimiters-depth-6-face)) 76 77 (fontified t face (rainbow-delimiters-depth-5-face)) 77 78 (fontified t) 78 84 (fontified t) 84 87 (fontified t face font-lock-keyword-face) 87 88 (fontified t) 88 97 (fontified t face font-lock-variable-name-face) 97 99 (fontified t) 99 105 (fontified t) 105 108 (fontified t face font-lock-keyword-face) 108 109 (fontified t face (rainbow-delimiters-depth-5-face)) 109 112 (fontified t face font-lock-keyword-face) 112 113 (fontified t) 113 114 (fontified t face font-lock-variable-name-face) 114 131 (fontified t) 131 132 (fontified t face (rainbow-delimiters-depth-5-face)) 132 133 (fontified t face (rainbow-delimiters-depth-5-face)) 133 134 (fontified t) 134 137 (fontified t) 137 151 (fontified t) 151 152 (fontified t face (rainbow-delimiters-depth-6-face)) 152 156 (fontified t face font-lock-constant-face) 156 157 (fontified t face (rainbow-delimiters-depth-6-face)) 157 158 (fontified t) 158 159 (fontified t) 159 165 (fontified t) 165 166 (fontified t face (rainbow-delimiters-depth-5-face)) 166 167 (fontified t) 167 179 (fontified t) 179 180 (fontified t face (rainbow-delimiters-depth-5-face)) 180 189 (fontified t) 189 190 (fontified t face (rainbow-delimiters-depth-5-face)) 190 195 (fontified t) 195 196 (fontified t face (rainbow-delimiters-depth-5-face)) 196 205 (fontified t) 205 206 (fontified t face (rainbow-delimiters-depth-5-face)) 206 207 (fontified t)) . 911) (undo-tree-id153 . -196) (undo-tree-id154 . -196) (undo-tree-id155 . -196) (undo-tree-id156 . -159) (undo-tree-id157 . -159) (undo-tree-id158 . -167) (undo-tree-id159 . -167) (undo-tree-id160 . -207) (undo-tree-id161 . -207) (undo-tree-id162 . 49) (undo-tree-id163 . -196) (undo-tree-id164 . 2) (undo-tree-id165 . -196) (undo-tree-id166 . -196) (undo-tree-id167 . -99) (undo-tree-id168 . -99) (undo-tree-id169 . -40) (undo-tree-id170 . -40) (undo-tree-id171 . -69) (undo-tree-id172 . -69) (undo-tree-id173 . -78) (undo-tree-id174 . -78) (undo-tree-id175 . -196) (undo-tree-id176 . -196) (undo-tree-id177 . -196) (undo-tree-id178 . -196) (undo-tree-id179 . -196) (undo-tree-id180 . -196) (undo-tree-id181 . -196) (undo-tree-id182 . -196) (undo-tree-id183 . -196) (undo-tree-id184 . -134) (undo-tree-id185 . -134) (undo-tree-id186 . 50) (undo-tree-id187 . 50) (undo-tree-id188 . -157) (undo-tree-id189 . -157) (undo-tree-id190 . -157) (undo-tree-id191 . -207)) nil (23092 16735 684819 986000) 0 nil]) ((1068 . 1069) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-6-face))) . 1068) (1067 . 1068) (#(" " 0 1 (fontified nil)) . -1067) (1067 . 1068) (#(")" 0 1 (fontified nil face font-lock-constant-face)) . -1067) (1067 . 1068) (#("0" 0 1 (fontified t)) . -1067) (undo-tree-id192 . -1) 1068 (1063 . 1068) (1062 . 1064) (#("(" 0 1 (fontified nil)) . -1062) (1048 . 1063) (1045 . 1048) (1045 . 1046) 1050) nil (23092 16735 684832 418000) 0 nil]) ((1044 . 1051) (1043 . 1045) (#("{" 0 1 (fontified nil face (rainbow-delimiters-depth-5-face))) . -1043) (1043 . 1044) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-5-face))) . 1043) (1042 . 1043) (#(" " 0 1 (fontified nil)) . -1042) (1042 . 1043) (#(")" 0 1 (fontified nil)) . -1042) (1040 . 1043) (#("_" 0 1 (fontified t)) . -1040) (undo-tree-id193 . -1) (#("_" 0 1 (fontified t)) . -1041) (undo-tree-id194 . -1) 1042 (1040 . 1042) (1020 . 1040) (#("i" 0 1 (fontified t)) . -1020) (undo-tree-id195 . -1) 1021 (1020 . 1021) (1019 . 1021) (#("(" 0 1 (fontified nil face font-lock-keyword-face)) . -1019) (1019 . 1020) (#(" " 0 1 (fontified t)) . -1019) (undo-tree-id196 . -1) 1020 (1016 . 1020) (1009 . 1016) (1008 . 1009) (999 . 1008) (#("trueA" 0 5 (fontified t face font-lock-variable-name-face)) . -999) (undo-tree-id197 . -5) 1004 (995 . 1004) (989 . 995) (989 . 990) 1026) nil (23092 16735 684851 46000) 0 nil]) ((1018 . 1027) (#("[true,true,true,true,true,true,true,true,true,true]" 0 1 (fontified t face (rainbow-delimiters-depth-6-face)) 1 5 (fontified t face font-lock-constant-face) 5 6 (fontified t) 6 10 (fontified t face font-lock-constant-face) 10 11 (fontified t) 11 15 (fontified t face font-lock-constant-face) 15 16 (fontified t) 16 20 (fontified t face font-lock-constant-face) 20 21 (fontified t) 21 25 (fontified t face font-lock-constant-face) 25 26 (fontified t) 26 30 (fontified t face font-lock-constant-face) 30 31 (fontified t) 31 35 (fontified t face font-lock-constant-face) 35 36 (fontified t) 36 40 (fontified t face font-lock-constant-face) 40 41 (fontified t) 41 45 (fontified t face font-lock-constant-face) 45 46 (fontified t) 46 50 (fontified t face font-lock-constant-face) 50 51 (fontified t face (rainbow-delimiters-depth-6-face))) . 1018) (undo-tree-id198 . -46) (undo-tree-id199 . -46) (undo-tree-id200 . -50) (undo-tree-id201 . -6) (undo-tree-id202 . 1) (undo-tree-id203 . -6) (undo-tree-id204 . -10) (undo-tree-id205 . -10) (undo-tree-id206 . -11) (undo-tree-id207 . -16) (undo-tree-id208 . -21) (undo-tree-id209 . -26) (undo-tree-id210 . -31) (undo-tree-id211 . -36) (undo-tree-id212 . -41) (undo-tree-id213 . -46) (undo-tree-id214 . 51) (undo-tree-id215 . -1) (undo-tree-id216 . 1) (undo-tree-id217 . -51)) nil (23092 16735 684876 637000) 0 nil]) ((#(" " 0 1 (fontified t)) . 1024) (undo-tree-id218 . -1) (undo-tree-id219 . -1)) nil (23092 16735 684881 443000) 0 nil]) ((#("," 0 1 (fontified t)) . 1069)) nil (23092 16735 684883 65000) 0 nil]) ((1065 . 1070) 1064) nil (23092 16735 684884 731000) 0 nil]) ((1060 . 1065) 1059) nil (23092 16735 684886 286000) 0 nil]) ((1055 . 1060) 1054) nil (23092 16735 684887 817000) 0 nil]) ((1050 . 1055) 1049) nil (23092 16735 684889 223000) 0 nil]) ((1045 . 1050) 1044) nil (23092 16735 684890 687000) 0 nil]) ((1040 . 1045) 1039) nil (23092 16735 684892 98000) 0 nil]) ((1035 . 1040) 1034) nil (23092 16735 684893 752000) 0 nil]) ((1030 . 1035) 1029) nil (23092 16735 684895 190000) 0 nil] [nil nil ((1063 . 1074) (1062 . 1064) (#("[" 0 1 (fontified nil face #3=(rainbow-delimiters-depth-5-face))) . -1062) (1062 . 1063) (1061 . 1063) (#("(" 0 1 (fontified nil)) . -1061) (1060 . 1062) (1056 . 1060) (#(")" 0 1 (fontified nil face #2=(rainbow-delimiters-depth-5-face))) . 1056) (1046 . 1056) (1045 . 1047) (#("(" 0 1 (fontified nil)) . -1045) (1039 . 1046) (1032 . 1039) 1029) ((#("
      " 0 1 (fontified t) 1 7 (fontified nil)) . 1032) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -7) (#("expect(" 0 6 (fontified nil) 6 7 (fontified nil)) . 1039) (undo-tree-id143 . -6) (1045 . 1046) (#("()" 0 1 (fontified nil face (rainbow-delimiters-depth-5-face)) 1 2 (fontified nil face #2#)) . 1045) (undo-tree-id144 . -1) (#("resultArr)" 0 9 (fontified nil) 9 10 (fontified nil face (rainbow-delimiters-depth-5-face))) . 1046) (undo-tree-id145 . -10) (1056 . 1057) (#(".toB" 0 4 (fontified nil)) . 1056) (undo-tree-id146 . -4) (#("e(" 0 1 (fontified nil) 1 2 (fontified nil)) . 1060) (undo-tree-id147 . -1) (1061 . 1062) (#("()" 0 1 (fontified nil face (rainbow-delimiters-depth-5-face)) 1 2 (fontified nil face (rainbow-delimiters-depth-5-face))) . 1061) (undo-tree-id148 . 1) (undo-tree-id149 . -1) (#("[" 0 1 (fontified nil face #3#)) . 1062) (1062 . 1063) (#("[]" 0 1 (fontified nil face (rainbow-delimiters-depth-6-face)) 1 2 (fontified nil face (rainbow-delimiters-depth-6-face))) . 1062) (undo-tree-id150 . 1) (undo-tree-id151 . -1) (#("true, true," 0 4 (fontified t face font-lock-constant-face) 4 6 (fontified t) 6 10 (fontified t face font-lock-constant-face) 10 11 (fontified t)) . 1063) (undo-tree-id152 . -10)) (23092 16600 551653 234000) 0 nil]) ((1029 . 1030) (1025 . 1029) (1019 . 1025) (1018 . 1020) (#("[" 0 1 (fontified nil face (rainbow-delimiters-depth-5-face))) . -1018) (1018 . 1019) (1017 . 1019) (#("(" 0 1 (fontified nil)) . -1017) (1012 . 1018) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-5-face))) . 1012) (1004 . 1012) (1002 . 1004) (1001 . 1003) (#("(" 0 1 (fontified nil)) . -1001) (995 . 1002) (988 . 995) 987) nil (23092 16600 552237 737000) 0 nil]) ((927 . 933) (#(" " 0 1 (fontified t)) . -927) (undo-tree-id121 . -1) 928 (925 . 928) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -925) (undo-tree-id122 . -1) (#("l" 0 1 (fontified t face font-lock-variable-name-face)) . -926) (undo-tree-id123 . -1) 927 (917 . 927)) nil (23092 16600 551693 836000) 0 nil]) (933) nil (23092 16600 551698 389000) 0 nil]) ((962 . 963) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-7-face))) . 962) (961 . 962) (960 . 961) (959 . 961) (#("(" 0 1 (fontified nil)) . -959) (940 . 960) (938 . 940) (935 . 938) (935 . 936) 940) nil (23092 16600 551705 213000) 0 nil]) ((934 . 941) (933 . 935) (#("{" 0 1 (fontified nil)) . -933) (928 . 934) (#(" " 0 1 (fontified t)) . -928) (undo-tree-id124 . -1) (#("x" 0 1 (fontified t)) . -929) (undo-tree-id125 . -1) 930 (928 . 930) (927 . 929) (#("(" 0 1 (fontified nil)) . -927) (924 . 928) (#("f" 0 1 (fontified t)) . -924) (undo-tree-id126 . -1) (#("o" 0 1 (fontified t)) . -925) (undo-tree-id127 . -1) (#("r" 0 1 (fontified t face font-lock-keyword-face)) . -926) (undo-tree-id128 . -1) (#("E" 0 1 (fontified t)) . -927) (undo-tree-id129 . -1) (#("a" 0 1 (fontified t)) . -928) (undo-tree-id130 . -1) (#("c" 0 1 (fontified t)) . -929) (undo-tree-id131 . -1) (#("h" 0 1 (fontified t)) . -930) (undo-tree-id132 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-5-face))) . -931) (undo-tree-id133 . -1) 932 (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-5-face))) . -932) (undo-tree-id134 . -1) (undo-tree-id135 . 1) (undo-tree-id136 . -1) 933 (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-5-face))) . 933) (932 . 933) (931 . 933) (#("(" 0 1 (fontified nil)) . -931) (917 . 932) (#("f" 0 1 (fontified t)) . -917) (undo-tree-id137 . -1) 918 (917 . 918) (910 . 917) 848) nil (23092 16600 551749 421000) 0 nil]) ((#("
" 0 1 (fontified t)) . 844) (undo-tree-id138 . 1)) nil (23092 16600 551761 843000) 0 nil]) ((#("      " 0 6 (fontified t)) . -844) (undo-tree-id139 . -6) 850 (843 . 850) (t 23092 16488 621228 786000) 827) nil (23092 16600 551767 454000) 0 nil]) ((42 . 78) (#("const wordpos = require('wordpos');
" 0 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 10 (fontified t face font-lock-variable-name-face) 10 11 (fontified t face font-lock-variable-name-face) 11 13 (fontified t face font-lock-variable-name-face) 13 23 (fontified t) 23 24 (fontified t face (rainbow-delimiters-depth-1-face)) 24 33 (fontified t face font-lock-string-face) 33 34 (fontified t face (rainbow-delimiters-depth-1-face)) 34 35 (fontified t) 35 36 (fontified t)) . 42) (undo-tree-id113 . 1) (undo-tree-id114 . -36) (undo-tree-id115 . -36) (undo-tree-id116 . -11) (undo-tree-id117 . -11) (undo-tree-id118 . -11) (undo-tree-id119 . -36)) nil (23092 16488 598456 811000) 0 nil]) ((52 . 53) (#("P" 0 1 (fontified t face font-lock-variable-name-face)) . 52)) nil (23092 16488 598460 456000) 0 nil]) ((76 . 77)) nil (23092 16488 598462 78000) 0 nil]) ((#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 76) (75 . 76) (#("'" 0 1 (fontified nil face font-lock-string-face)) . 75) (73 . 75) (67 . 73) (66 . 68) (#("'" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -66) (66 . 67) (65 . 67) (#("(" 0 1 (fontified nil)) . -65) (52 . 66) (48 . 52) (#("W" 0 1 (fontified t face font-lock-variable-name-face)) . -48) (undo-tree-id120 . -1) 49 (42 . 49) (41 . 42) (t 23092 16226 244302 503000) 34) nil (23092 16488 598467 703000) 0 nil]) ((914 . 959) (#("      expect(typeof result).toEqual('object');
" 0 12 (fontified t) 12 13 (fontified t face (rainbow-delimiters-depth-5-face)) 13 19 (fontified t face font-lock-keyword-face) 19 26 (fontified t) 26 27 (fontified t face (rainbow-delimiters-depth-5-face)) 27 35 (fontified t) 35 36 (fontified t face (rainbow-delimiters-depth-5-face)) 36 44 (fontified t face font-lock-string-face) 44 45 (fontified t face (rainbow-delimiters-depth-5-face)) 45 46 (fontified t) 46 47 (fontified t)) . 914) (undo-tree-id79 . -47) (undo-tree-id80 . -47) (undo-tree-id81 . 1) (undo-tree-id82 . -43) (undo-tree-id83 . -44) (undo-tree-id84 . 2) (undo-tree-id85 . 2) (undo-tree-id86 . -45) (undo-tree-id87 . -45) (undo-tree-id88 . -45) (undo-tree-id89 . -47) (761 . 875) (#("      let string = 'nouns';
      let number = 10;
      result = this.madLib.list({string: string, number: number});
" 0 6 (fontified t) 6 9 (fontified t face font-lock-keyword-face) 9 10 (fontified t) 10 16 (fontified t face font-lock-variable-name-face) 16 19 (fontified t) 19 26 (fontified t face font-lock-string-face) 26 28 (fontified t) 28 34 (fontified t) 34 37 (fontified t face font-lock-keyword-face) 37 38 (fontified t) 38 44 (fontified t face font-lock-variable-name-face) 44 50 (fontified t) 50 51 (fontified t) 51 66 (fontified t) 66 70 (fontified t face font-lock-constant-face) 70 71 (fontified t) 71 82 (fontified t) 82 83 (fontified t face (rainbow-delimiters-depth-5-face)) 83 84 (fontified t face (rainbow-delimiters-depth-6-face)) 84 114 (fontified t) 114 115 (fontified t face (rainbow-delimiters-depth-6-face)) 115 116 (fontified t face (rainbow-delimiters-depth-5-face)) 116 117 (fontified t) 117 118 (fontified t)) . 761) (undo-tree-id90 . -118) (undo-tree-id91 . -118) (undo-tree-id92 . -28) (undo-tree-id93 . -28) (undo-tree-id94 . -51) (undo-tree-id95 . -51) (undo-tree-id96 . -118) (664 . 696) (#("      this.madLib = new MadLib();
" 0 6 (fontified t) 6 10 (fontified t face font-lock-constant-face) 10 20 (fontified t) 20 23 (fontified t face font-lock-keyword-face) 23 24 (fontified t) 24 30 (fontified t face font-lock-type-face) 30 31 (fontified t face (rainbow-delimiters-depth-5-face)) 31 32 (fontified t face (rainbow-delimiters-depth-5-face)) 32 34 (fontified t)) . 664) (undo-tree-id97 . -34) (undo-tree-id98 . -34) (undo-tree-id99 . -34)) nil (23092 16226 184418 364000) 0 nil]) ((965 . 966) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-5-face))) . 965) (undo-tree-id100 . -1) (964 . 965) (#("'" 0 1 (fontified nil face font-lock-string-face)) . 964) (undo-tree-id101 . -1) (957 . 964) (956 . 958) (#("'" 0 1 (fontified nil face (rainbow-delimiters-depth-5-face))) . -956) (956 . 957) (955 . 957) (#("(" 0 1 (fontified nil)) . -955) (950 . 956) (#(" " 0 1 (fontified t)) . -950) (undo-tree-id102 . -1) 951 (947 . 951) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-5-face))) . 947) (946 . 947) (#(" " 0 1 (fontified nil)) . -946) (946 . 947) (#(")" 0 1 (fontified nil)) . -946) (943 . 947) (933 . 943) (#("r" 0 1 (fontified t)) . -933) (undo-tree-id103 . -1) (#("e" 0 1 (fontified t)) . -934) (undo-tree-id104 . -1) (#("s" 0 1 (fontified t)) . -935) (undo-tree-id105 . -1) (#("u" 0 1 (fontified t)) . -936) (undo-tree-id106 . -1) (#("l" 0 1 (fontified t)) . -937) (undo-tree-id107 . -1) (#("t" 0 1 (fontified t)) . -938) (undo-tree-id108 . -1) (#("e" 0 1 (fontified t)) . -939) (undo-tree-id109 . -1) 940 (935 . 940) (#("q" 0 1 (fontified t)) . -935) (undo-tree-id110 . -1) 936 (933 . 936) (932 . 934) (#("(" 0 1 (fontified nil)) . -932) (926 . 933) (919 . 926) 918) nil (23092 16226 184438 831000) 0 nil]) ((879 . 880) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-5-face))) . 879) (878 . 879) (#(" " 0 1 (fontified nil)) . -878) (878 . 879) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-6-face))) . -878) (878 . 879) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-6-face))) . 878) (877 . 878) (#(" " 0 1 (fontified nil)) . -877) (877 . 878) (#("}" 0 1 (fontified nil)) . -877) (870 . 878) (#("n" 0 1 (fontified t)) . -870) (undo-tree-id111 . -1) (#("u" 0 1 (fontified t)) . -871) (undo-tree-id112 . -1) 872 (857 . 872) (847 . 857) (846 . 848) (#("{" 0 1 (fontified nil face (rainbow-delimiters-depth-5-face))) . -846) (846 . 847)) nil (23092 16226 184449 284000) 0 nil]) ((841 . 845) (840 . 841)) nil (23092 16226 184452 400000) 0 nil] [nil nil ((840 . 845) (#("." 0 1 (fontified t)) . -840) (#("t" 0 1 (fontified t)) . -841) (#("h" 0 1 (fontified t)) . -842) (#("i" 0 1 (fontified t)) . -843) (#("s" 0 1 (fontified t face font-lock-constant-face)) . -844) (#("." 0 1 (fontified t)) . -845) 846 (840 . 846)) ((#(".this." 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil face font-lock-constant-face) 5 6 (fontified nil)) . 840) (840 . 846) (#("this." 0 5 (fontified t)) . 840) (undo-tree-id78 . -4)) (23092 16170 343648 521000) 0 nil]) ((829 . 834) (#("." 0 1 (fontified t)) . -829) (undo-tree-id67 . -1) (#("t" 0 1 (fontified t)) . -830) (undo-tree-id68 . -1) (#("h" 0 1 (fontified t)) . -831) (undo-tree-id69 . -1) (#("i" 0 1 (fontified t)) . -832) (undo-tree-id70 . -1) (#("s" 0 1 (fontified t)) . -833) (undo-tree-id71 . -1) (#("." 0 1 (fontified t)) . -834) (undo-tree-id72 . -1) 835 (829 . 835)) nil (23092 16170 344084 514000) 0 nil]) ((#("{" 0 1 (fontified nil face (rainbow-delimiters-depth-6-face))) . -695) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-6-face))) . 696) (undo-tree-id76 . -1) (695 . 697) (#("{" 0 1 (fontified nil face (rainbow-delimiters-depth-5-face))) . -695) (695 . 696) (#("P" 0 1 (fontified t)) . -695) (undo-tree-id77 . -1) 696 (695 . 696) (668 . 670) (692 . 694) (#("(" 0 1 (fontified nil face font-lock-type-face)) . -692) (673 . 693) (#("number" 0 6 (fontified t)) . 673)) nil (23092 16170 343714 746000) 0 nil]) ((818 . 820) (#("(" 0 1 (fontified nil)) . -818) (812 . 819) (803 . 812) (796 . 803) 795) nil (23092 16170 343724 204000) 0 nil]) ((793 . 796) (780 . 793) (773 . 780) (772 . 773) (#("'" 0 1 (fontified nil face font-lock-string-face)) . 772) (766 . 772) (765 . 767) (#("'" 0 1 (fontified nil)) . -765) (752 . 766) (745 . 752) 744) nil (23092 16170 343733 214000) 0 nil]) ((53 . 54) (#("m" 0 1 (fontified t face font-lock-string-face)) . 53)) nil (23092 16170 343739 350000) 0 nil]) ((7 . 8) (#("m" 0 1 (fontified t face font-lock-variable-name-face)) . 7) (t 23092 15969 523902 452000)) nil (23092 16170 343743 123000) 0 nil]) ((730 . 785) (#("      let result;
      expect(result.length).toEqual(10);
" 0 6 (fontified t) 6 9 (fontified t face font-lock-keyword-face) 9 10 (fontified t) 10 16 (fontified t face font-lock-variable-name-face) 16 17 (fontified t) 17 18 (fontified t) 18 30 (fontified t) 30 31 (fontified t face (rainbow-delimiters-depth-5-face)) 31 44 (fontified t) 44 45 (fontified t face (rainbow-delimiters-depth-5-face)) 45 53 (fontified t) 53 54 (fontified t face (rainbow-delimiters-depth-5-face)) 54 56 (fontified t) 56 57 (fontified t face (rainbow-delimiters-depth-5-face)) 57 58 (fontified t) 58 59 (fontified t)) . 730) (undo-tree-id48 . -18) (undo-tree-id49 . -18) (undo-tree-id50 . -59) (undo-tree-id51 . -59) (undo-tree-id52 . -59) (undo-tree-id53 . -59) (undo-tree-id54 . -24) (undo-tree-id55 . -24) (undo-tree-id56 . -24) (undo-tree-id57 . 43) (undo-tree-id58 . 43) (undo-tree-id59 . -16) (undo-tree-id60 . -16) (undo-tree-id61 . -16) (undo-tree-id62 . -59) (664 . 681) (#("      this.number; 
" 0 6 (fontified t) 6 10 (fontified t face font-lock-constant-face) 10 11 (fontified t) 11 18 (fontified t) 18 19 (fontified t) 19 20 (fontified t)) . 664) (undo-tree-id63 . -20) (undo-tree-id64 . -20) (undo-tree-id65 . 2) (undo-tree-id66 . -20)) nil (23092 15969 503384 357000) 0 nil]) ((#(" " 0 1 (fontified t)) . 749)) nil (23092 15969 503388 230000) 0 nil]) ((#("=" 0 1 (fontified t)) . 749)) nil (23092 15969 503389 602000) 0 nil]) ((#(" " 0 1 (fontified t)) . 749) (t 23092 15961 383993 790000)) nil (23092 15969 503390 707000) 0 nil]) ((#(" " 0 1 (fontified nil)) . -670) (682 . 683)) nil (23092 15961 357353 852000) 0 nil]) ((#(" " 0 1 (fontified t)) . 682)) nil (23092 15961 357357 56000) 0 nil]) ((#("=" 0 1 (fontified t)) . 683) (t 23092 15944 187519 684000)) nil (23092 15961 357359 299000) 0 nil]) ((1224 . 1225)) nil (23092 15944 155472 531000) 0 nil]) ((675 . 676) (#("l" 0 1 (fontified t)) . -675) (undo-tree-id0 . -1) 676 (671 . 676) (#("let" 0 3 (fontified t face font-lock-keyword-face)) . 670)) nil (23092 15944 155479 590000) 0 nil]) ((670 . 683) (663 . 670) 662) nil (23092 15944 155482 42000) 0 nil]) ((731 . 732) (#("-" 0 1 (fontified t)) . -731) (undo-tree-id1 . -1) 732 (729 . 732)) nil (23092 15944 155484 729000) 0 nil]) ((767 . 769)) nil (23092 15944 155485 944000) 0 nil]) ((#("'object'" 0 7 (fontified t face font-lock-string-face) 7 8 (fontified t face font-lock-string-face)) . 767) (undo-tree-id2 . -1) 768) nil (23092 15944 155487 520000) 0 nil]) ((750 . 757)) nil (23092 15944 155488 487000) 0 nil]) ((#("typeof " 0 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t)) . 744)) nil (23092 15944 155489 153000) 0 nil]) ((776 . 777) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-5-face))) . 776) (775 . 776) (#(" " 0 1 (fontified nil)) . -775) (775 . 776) (#(")" 0 1 (fontified nil face font-lock-string-face)) . -775) (775 . 776) (#("'" 0 1 (fontified nil face font-lock-string-face)) . 775) (774 . 775) (#(" " 0 1 (fontified nil)) . -774) (774 . 775) (#("'" 0 1 (fontified nil face font-lock-string-face)) . -774) (770 . 775) (#("e" 0 1 (fontified t face font-lock-string-face)) . -770) (undo-tree-id3 . -1) (#("c" 0 1 (fontified t face font-lock-string-face)) . -771) (undo-tree-id4 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -772) (undo-tree-id5 . -1) 773 (769 . 773) (#("j" 0 1 (fontified t face font-lock-string-face)) . -769) (undo-tree-id6 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -770) (undo-tree-id7 . -1) 771 (770 . 771) (#("b" 0 1 (fontified t face font-lock-string-face)) . -770) (undo-tree-id8 . -1) (#("j" 0 1 (fontified t face font-lock-string-face)) . -771) (undo-tree-id9 . -1) 772 (768 . 772) (#("b" 0 1 (fontified t face font-lock-string-face)) . -768) (undo-tree-id10 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -769) (undo-tree-id11 . -1) (#("j" 0 1 (fontified t face font-lock-string-face)) . -770) (undo-tree-id12 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -771) (undo-tree-id13 . -1) 772 (768 . 772) (767 . 769) (#("'" 0 1 (fontified nil face (rainbow-delimiters-depth-5-face))) . -767) (767 . 768) (766 . 768) (#("(" 0 1 (fontified nil)) . -766) (761 . 767) (#("B" 0 1 (fontified t)) . -761) (undo-tree-id14 . -1) (#("e" 0 1 (fontified t)) . -762) (undo-tree-id15 . -1) 763) nil (23092 15944 155504 717000) 0 nil]) ((744 . 751)) nil (23092 15944 155509 289000) 0 nil]) ((754 . 756) (#("E" 0 1 (fontified t)) . -754) (undo-tree-id16 . -1) (#("q" 0 1 (fontified t)) . -755) (undo-tree-id17 . -1) 756 (#("u" 0 1 (fontified t)) . -756) (undo-tree-id18 . -1) (#("a" 0 1 (fontified t)) . -757) (undo-tree-id19 . -1) (#("l" 0 1 (fontified t)) . -758) (undo-tree-id20 . -1) 759 (754 . 759)) nil (23092 15944 155515 379000) 0 nil]) ((729 . 730) (#(" " 0 1 (fontified t)) . -729) (undo-tree-id21 . -1) (#("=" 0 1 (fontified t)) . -730) (undo-tree-id22 . -1) 731 (720 . 731) (#("k" 0 1 (fontified t)) . -720) (undo-tree-id23 . -1) (#("e" 0 1 (fontified t)) . -721) (undo-tree-id24 . -1) 722 (719 . 722) (#("r" 0 1 (fontified t)) . -719) (undo-tree-id25 . -1) (#("e" 0 1 (fontified t)) . -720) (undo-tree-id26 . -1) (#("s" 0 1 (fontified t)) . -721) (undo-tree-id27 . -1) 722 (719 . 722) (713 . 719) (713 . 714) 731) nil (23092 15944 155524 13000) 0 nil]) ((726 . 732) (#("madLib('nouns')" 0 6 (fontified t) 6 7 (fontified t face (rainbow-delimiters-depth-6-face)) 7 14 (fontified t face font-lock-string-face) 14 15 (fontified t face (rainbow-delimiters-depth-6-face))) . 726) (undo-tree-id28 . -3) 729) nil (23092 15944 155527 205000) 0 nil]) ((#("B" 0 1 (fontified t)) . -745) (undo-tree-id29 . -1) (#("e" 0 1 (fontified t)) . -746) (undo-tree-id30 . -1) 747 (742 . 747)) nil (23092 15944 155529 846000) 0 nil]) ((#("'" 0 1 (fontified nil face font-lock-string-face)) . 740) (734 . 740) (733 . 735) (#("'" 0 1 (fontified nil face (rainbow-delimiters-depth-6-face))) . -733) (733 . 734) (732 . 734) (#("(" 0 1 (fontified nil)) . -732) (726 . 733) (725 . 727) (#("(" 0 1 (fontified nil)) . -725) (725 . 726) (#("i" 0 1 (fontified t)) . -725) (undo-tree-id31 . -1) 726 (719 . 726) (#("m" 0 1 (fontified t)) . -719) (undo-tree-id32 . -1) (#("a" 0 1 (fontified t)) . -720) (undo-tree-id33 . -1) (#("d" 0 1 (fontified t)) . -721) (undo-tree-id34 . -1) 722 (#(" " 0 1 (fontified t)) . -722) (undo-tree-id35 . -1) 723 (720 . 723)) nil (23092 15944 155537 560000) 0 nil]) ((719 . 720) (#("M" 0 1 (fontified t)) . 719)) nil (23092 15944 155540 305000) 0 nil]) ((7 . 8) (#("M" 0 1 (fontified t face font-lock-variable-name-face)) . 7)) nil (23092 15944 155541 293000) 0 nil]) ((53 . 54) (#("M" 0 1 (fontified t face font-lock-string-face)) . 53)) nil (23092 15944 155542 176000) 0 nil]) ((719 . 720) (#("m" 0 1 (fontified t)) . -719) (undo-tree-id36 . -1) 720 (719 . 720) (712 . 719) 699) nil (23092 15944 155544 511000) 0 nil]) ((698 . 700) (677 . 698) (#("processei a question and returns a formatted response" 0 27 (fontified t face font-lock-string-face) 27 53 (fontified t face font-lock-string-face)) . 677) (undo-tree-id37 . -8) (undo-tree-id38 . -8) (undo-tree-id39 . 44) (undo-tree-id40 . -8) (undo-tree-id41 . 44) (undo-tree-id42 . -8) (undo-tree-id43 . -8) 685) nil (23092 15944 155550 485000) 0 nil]) ((685 . 686) (#("s" 0 1 (fontified t face font-lock-string-face)) . 685)) nil (23092 15944 155552 15000) 0 nil]) ((1154 . 1157) (1137 . 1140) (1091 . 1094) (1015 . 1018) (946 . 949) (882 . 885) (832 . 835) (806 . 809) (747 . 750) 1126) nil (23092 15944 155554 202000) 0 nil]) ((657 . 660) (622 . 625) (592 . 595) (562 . 565) (527 . 530) (457 . 460) (375 . 378) (309 . 312) (277 . 280) (242 . 245) (209 . 212) (167 . 170) (132 . 135) (95 . 98) 621) nil (23092 15944 155557 422000) 0 nil]) ((53 . 59) (#("GitWitch" 0 8 (fontified t face font-lock-string-face)) . 53)) nil (23092 15944 155558 865000) 0 nil]) ((32 . 38) (#("GitWitch" 0 8 (fontified t face font-lock-string-face)) . 32)) nil (23092 15944 155559 865000) 0 nil]) ((7 . 13) (#("m" 0 1 (fontified t face font-lock-variable-name-face)) . -7) (undo-tree-id44 . -1) (#("a" 0 1 (fontified t face font-lock-variable-name-face)) . -8) (undo-tree-id45 . -1) (#("d" 0 1 (fontified t face font-lock-variable-name-face)) . -9) (undo-tree-id46 . -1) 10 (7 . 10) (#("GitWitch" 0 8 (fontified t face font-lock-variable-name-face)) . 7)) nil (23092 15944 155563 517000) 0 nil]) ((#("
" 0 1 (fontified t rear-nonsticky t)) . 1) (undo-tree-id47 . -1)) nil (23092 15944 155565 625000) 0 nil]) ((nil rear-nonsticky nil 1 . 2) (#("
" 0 1 (fontified nil)) . -1108) (1 . 1109) (t 23092 15349 490321 599000)) nil (23092 15944 155566 981000) 0 nil]) nil nil (23092 15944 155567 796000) 0 nil] #4# 13165 191 nil]